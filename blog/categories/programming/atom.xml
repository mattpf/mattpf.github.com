<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | mattpf]]></title>
  <link href="http://mattpf.net/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mattpf.net/"/>
  <updated>2012-03-11T06:26:40-04:00</updated>
  <id>http://mattpf.net/</id>
  <author>
    <name><![CDATA[Matthew Powers-Freeling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Impossible problems]]></title>
    <link href="http://mattpf.net/blog/2012/03/11/impossible-problems/"/>
    <updated>2012-03-11T00:48:00-05:00</updated>
    <id>http://mattpf.net/blog/2012/03/11/impossible-problems</id>
    <content type="html"><![CDATA[<p>The midterm exam for one of my classes featured three questions, all of which were to
be answered with some relatively simple coding. Aside for one minor flaw: the first
question <em>was not possible</em>. Mostly.</p>

<p>Below is a minimal reproduction of the question, with all the irrelevant details (and,
for that matter, the original question) omitted, leaving only the flaw that made it
impossible.</p>

<!-- more -->


<hr />

<p>Here is some code:</p>

<p>``` cpp</p>

<h1>include <cstdlib></h1>

<h1>define MAX_ENTRIES 23</h1>

<p>class SomeClass {</p>

<pre><code>public:
    SomeClass();
    int countThing();
    int countAllTheThings();
private:
    int n;
</code></pre>

<p>};</p>

<p>SomeClass::SomeClass() {</p>

<pre><code>n = rand() % 10;
</code></pre>

<p>}</p>

<p>int SomeClass::countThing() {</p>

<pre><code>return n;
</code></pre>

<p>}</p>

<p>int SomeClass::countAllTheThings() {</p>

<pre><code>// Implement this.
</code></pre>

<p>}</p>

<p>int main() {</p>

<pre><code>SomeClass things[MAX_ENTRIES];

// Do things with the things.

return 0;
</code></pre>

<p>}
```</p>

<p>Implement <code>SomeClass::countAllTheThings</code> such that it calls <code>countThing</code> on all the
entries in <code>things</code> (declared in <code>main</code>). <code>SomeClass::countAllTheThings</code> must not
take any parameters. The invocation of <code>countAllTheThings</code> will be from the <code>main</code>
function.</p>

<p>Any ideas?</p>

<hr />

<p>Here is <em>a</em> solution; I do not claim it to be a good one. But then, I don't claim
that the problem, as specified, has <em>any</em> good solutions.</p>

<p>``` cpp
// This may only be invoked as follows, from the main function.
// Any other invocation is invalid.
//   things[0].countAllTheThings();
int SomeClass::countAllTheThings() {</p>

<pre><code>int total = 0;
for(int i = 0; i &lt; MAX_ENTRIES; ++i) {
    total += (this + i)-&gt;countThing();
}
return total;
</code></pre>

<p>}
```</p>

<p>This works because object has an implicit pointer to itself, <code>this</code>. Provided we know
the method is called on the first (0th) element of the array, and that the size of the
array is <code>MAX_ENTRIES</code>, we can use <a href="http://en.wikipedia.org/wiki/Pointer_(computer_programming)#C_and_C.2B.2B">pointer arithmetic</a> to find references to every
other member of the array. Thus, the solution is <em>valid</em>, but neither particularly
elegant nor remotely reusable. Or sane, for that matter.</p>

<p>An alternative, <em>possibly</em> neater solution might be to set a reference to <code>things</code> on
the <code>SomeClass</code> instance itself, then call <code>countAllTheThings</code> with a reference to that.
Not much better, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A new project: SchedSim]]></title>
    <link href="http://mattpf.net/blog/2012/02/17/starting-schedsim/"/>
    <updated>2012-02-17T14:32:00-05:00</updated>
    <id>http://mattpf.net/blog/2012/02/17/starting-schedsim</id>
    <content type="html"><![CDATA[<p>I am now required (for a class) to create a <em>CPU scheduling simulator</em>. Which will be fun.</p>

<p>For now I'm mostly contemplating how to implement… well… any of it, really. I'm sure it'll
be an interesting experience. All I have at the moment is a quick UI mockup I threw together
for the sake of the "proposal" – which is something of a misnomer, since there wasn't any
real proposing going on, but oh well.</p>

<p><img class="center" src="/images/blog/schedsim-mockup-1.png"></p>

<p>I'm somewhat undecided on if I should expand those bars vertically to be somewhat more like
the thing below, though I suspect the answer is probably "yes."</p>

<p><img class="center" src="/images/blog/hw2-rr-gantt.png"></p>

<p>The whole user interface is probably weeks away at this point, though. We shall see!</p>
]]></content>
  </entry>
  
</feed>
