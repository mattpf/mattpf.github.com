<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mattpf]]></title>
  <link href="http://mattpf.net/atom.xml" rel="self"/>
  <link href="http://mattpf.net/"/>
  <updated>2012-03-11T01:14:28-05:00</updated>
  <id>http://mattpf.net/</id>
  <author>
    <name><![CDATA[Matthew Powers-Freeling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Impossible problems]]></title>
    <link href="http://mattpf.net/blog/2012/03/11/impossible-problems/"/>
    <updated>2012-03-11T00:48:00-05:00</updated>
    <id>http://mattpf.net/blog/2012/03/11/impossible-problems</id>
    <content type="html"><![CDATA[<p>The midterm exam for one of my classes featured three questions, all of which were to
be answered with some relatively simple coding. Aside for one minor flaw: the first
question <em>was not possible</em>. Mostly.</p>

<p>Below is a minimal reproduction of the question, with all the irrelevant details (and,
for that matter, the original question) omitted, leaving only the flaw that made it
impossible.</p>

<!-- more -->


<hr />

<p>Here is some code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#define MAX_ENTRIES 23</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">SomeClass</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">countThing</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">countAllTheThings</span><span class="p">();</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">SomeClass</span><span class="o">::</span><span class="n">SomeClass</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">SomeClass</span><span class="o">::</span><span class="n">countThing</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">SomeClass</span><span class="o">::</span><span class="n">countAllTheThings</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Implement this.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SomeClass</span> <span class="n">things</span><span class="p">[</span><span class="n">MAX_ENTRIES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Do things with the things.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Implement <code>SomeClass::countAllTheThings</code> such that it calls <code>countThing</code> on all the
entries in <code>things</code> (declared in <code>main</code>). <code>SomeClass::countAllTheThings</code> must not
take any parameters. The invocation of <code>countAllTheThings</code> will be from the <code>main</code>
function.</p>

<p>Any ideas?</p>

<hr />

<p>Here is <em>a</em> solution; I do not claim it to be a good one. But then, I don&#8217;t claim
that the problem, as specified, has <em>any</em> good solutions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// This may only be invoked as follows, from the main function.</span>
</span><span class='line'><span class="c1">// Any other invocation is invalid.</span>
</span><span class='line'><span class="c1">//   things[0].countAllTheThings();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">SomeClass</span><span class="o">::</span><span class="n">countAllTheThings</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_ENTRIES</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">+=</span> <span class="p">(</span><span class="k">this</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">countThing</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">total</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An alternative, <em>possibly</em> neater solution might be to set a reference to <code>things</code> on
the <code>SomeClass</code> instance itself, then call <code>countAllTheThings</code> with a reference to that.
Not much better, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A new project: SchedSim]]></title>
    <link href="http://mattpf.net/blog/2012/02/17/starting-schedsim/"/>
    <updated>2012-02-17T14:32:00-05:00</updated>
    <id>http://mattpf.net/blog/2012/02/17/starting-schedsim</id>
    <content type="html"><![CDATA[<p>I am now required (for a class) to create a <em>CPU scheduling simulator</em>. Which will be fun.</p>

<p>For now I&#8217;m mostly contemplating how to implement… well… any of it, really. I&#8217;m sure it&#8217;ll
be an interesting experience. All I have at the moment is a quick UI mockup I threw together
for the sake of the &#8220;proposal&#8221; – which is something of a misnomer, since there wasn&#8217;t any
real proposing going on, but oh well.</p>

<p><img class="center" src="http://mattpf.net/images/blog/schedsim-mockup-1.png"></p>

<p>I&#8217;m somewhat undecided on if I should expand those bars vertically to be somewhat more like
the thing below, though I suspect the answer is probably &#8220;yes.&#8221;</p>

<p><img class="center" src="http://mattpf.net/images/blog/hw2-rr-gantt.png"></p>

<p>The whole user interface is probably weeks away at this point, though. We shall see!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, world!]]></title>
    <link href="http://mattpf.net/blog/2012/02/13/hello-world/"/>
    <updated>2012-02-13T17:26:00-05:00</updated>
    <id>http://mattpf.net/blog/2012/02/13/hello-world</id>
    <content type="html"><![CDATA[<p>I decided it would probably be worth having some <em>actual content</em> up on this domain, so here is a blog!
It&#8217;s not a terribly exciting blog, but it is a blog none-the-less.</p>

<p>Perhaps I will actually post something someday, if only because having Things On The Internet is
frequently wise.</p>
]]></content>
  </entry>
  
</feed>
